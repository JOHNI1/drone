<?xml version="1.0" ?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">

    <xacro:include filename="inertial_macros.xacro"/>

    <xacro:macro name="drone_arm" params="num parent_link dis_from_center length diameter arm_incline_angle arm_mesh prop_mesh cw 
                                          prop_size_multiplier cylinder_d cylinder_l a_mass a_iner:='None' r_mass r_iner angle
                                          number_of_blades lift_a0 lift_alpha_stall lift_cla lift_cda lift_cma lift_cla_stall lift_sda_stall lift_cma_stall 
                                          lift_area lift_air_density lift_cp"> 

        <xacro:property name="base_arm_joint" value="base_arm_joint_${num}" />
        <xacro:property name="arm_link" value="arm_link_${num}" />
        <xacro:property name="rotor_joint" value="rotor_joint_${num}" />
        <xacro:property name="prop_link" value="prop_link_${num}" />

        <joint name="${base_arm_joint}" type="fixed">
            <parent link="${parent_link}"/>
            <child link="${arm_link}"/>
            <origin xyz="0 0 0" rpy="0 0 ${angle + pi}"/>
        </joint>

        <xacro:link_creator_i link_name="${arm_link}" pose_xyz="0 ${cos(arm_incline_angle) * (length / 2.0) + dis_from_center} ${sin(arm_incline_angle) * (length / 2.0)}" pose_rpy="${arm_incline_angle + 1.57079632679} 0 0" mesh_path="${arm_mesh}" scale_xyz="${diameter} ${diameter} ${length}" mass="${a_mass}" iner="${a_iner}"/>


        <joint name="${rotor_joint}" type="continuous">
            <parent link="${arm_link}"/>
            <child link="${prop_link}"/>
            <origin xyz="0 ${cos(arm_incline_angle) * length + dis_from_center} ${sin(arm_incline_angle) * length}" rpy="${arm_incline_angle} 0 0"/>
            <axis xyz="0 0 1"/>
            <dynamics damping="0.004"/>       
        </joint>
        <gazebo reference="${rotor_joint}">
            <physics>
                <ode>
                    <implicit_spring_damper>1</implicit_spring_damper>
                </ode>
            </physics>
        </gazebo>
        
        <xacro:prop_link_creator link_name="${prop_link}" pose_xyz="0 0 0.03" pose_rpy="0 -0 0" mesh_path="${prop_mesh}" 
                                 scale_xyz="${prop_size_multiplier} ${prop_size_multiplier} ${prop_size_multiplier}" 
                                 col_scale_xyz="${cylinder_d} 0 ${cylinder_l}" mass="${r_mass}" iner="${r_iner}"/>
        


        <xacro:property name="direction" value="${(float(cw) * 2) - 1}"/>
        <xacro:macro name="create_blades" params="i">
            <xacro:if value="${i > 0}">
                <!-- Here define the arm -->
                <xacro:property name="counter" value="${number_of_blades - i}"/>

                <xacro:property name="rotor_blade" value="rotor_${num}_blade_${counter}"/>
                <xacro:property name="blade_angle" value="${((2 * pi) / float(number_of_blades)) * float(counter)}"/>
                <!-- <xacro:property name="blade_angle" value="${(num * pi) / 12}"/> -->

                <gazebo>
                    <plugin name="${rotor_blade}" filename="libLiftDragPlugin.so">               
                        <a0>${lift_a0}</a0> 
                        <alpha_stall>${lift_alpha_stall}</alpha_stall>
                        <cla>${lift_cla}</cla>
                        <cda>${lift_cda}</cda>
                        <cma>${lift_cma}</cma>
                        <cla_stall>${lift_cla_stall}</cla_stall>
                        <cda_stall>${lift_sda_stall}</cda_stall>
                        <cma_stall>${lift_cma_stall}</cma_stall>
                        <area>${lift_area}</area>
                        <air_density>${lift_air_density}</air_density>
                        <cp>${cos(float(blade_angle)) * float(lift_cp)} ${sin(float(blade_angle)) * float(lift_cp)} 0</cp>
                        <forward>${cos(float(blade_angle) - ((pi / 2) * direction))} ${sin(float(blade_angle) - ((pi / 2) * direction))} 0</forward>
                        <upward>0 0 1</upward>
                        <link_name>${prop_link}</link_name>
                    </plugin>
                </gazebo>
                <!-- Recursively call the macro with a decremented count -->
                <xacro:create_blades i="${i - 1}"/>
            </xacro:if>
        </xacro:macro>
        <!-- Initial call to the macro with the desired number of joints -->
        <xacro:create_blades i="${int(number_of_blades)}"/>
        <!-- end Define arms! -->

    </xacro:macro>







    <xacro:macro name="set_mesh" params="mesh scale">
        <xacro:if value="${mesh == 'Box'}">
            <box size="${scale}"/>
        </xacro:if>
        <xacro:if value="${mesh == 'Cylinder'}">
            <xacro:property name="scale_list" value="${scale.split(' ')}" />
            <cylinder radius="${float(scale_list[0]) / 2}" length="${scale_list[2]}"/>
        </xacro:if>
        <xacro:if value="${mesh == 'Sphere'}">
            <xacro:property name="scale_list" value="${scale.split(' ')}" />
            <sphere radius="${float(scale_list[0]) / 2}"/>
        </xacro:if>
        <xacro:if value="${mesh != 'Box'}">
            <xacro:if value="${mesh != 'Cylinder'}">
                <xacro:if value="${mesh != 'Sphere'}">
                    <mesh filename="${mesh}" scale="${scale}"/>
                </xacro:if>
            </xacro:if>
        </xacro:if>
    </xacro:macro>


    <xacro:macro name="link_creator_foundation" params="link_name pose_xyz pose_rpy mesh_path:='Box' scale_xyz **extra_visual **extra_settings">


        <link name="${link_name}">
            <visual>
                <geometry>
                    <xacro:set_mesh mesh="${mesh_path}" scale="${scale_xyz}" />
                </geometry>
                <origin xyz="${pose_xyz}" rpy="${pose_rpy}"/>
                <xacro:insert_block name="extra_visual"/>
            </visual>
            <xacro:insert_block name="extra_settings"/>
        </link>
        <gazebo reference="${link_name}">
            <visual>
                <material>
                    <script>
                        <name>Gazebo/DarkGrey</name>
                    </script>
                </material>
            </visual>
        </gazebo>
    </xacro:macro>

    <xacro:macro name="link_creator" params="link_name pose_xyz pose_rpy mesh_path:='Box' scale_xyz">
        <xacro:link_creator_foundation link_name="${link_name}" pose_xyz="${pose_xyz}" pose_rpy="${pose_rpy}" mesh_path="${mesh_path}" scale_xyz="${scale_xyz}">
            <extra_visual/>
            <extra_settings/>
        </xacro:link_creator_foundation>
    </xacro:macro>



    <xacro:macro name="link_creator_i_foundation" params="link_name pose_xyz pose_rpy mesh_path:='Box' col_mesh_path:='None' scale_xyz col_scale_xyz:='None' seperate_collider_xyzrpy:='None' center_mass_xyz:='0 0 0' mass iner:='None' **extra_collision **extra_visual **extra_settings">
        <xacro:link_creator_foundation link_name="${link_name}" pose_xyz="${pose_xyz}" pose_rpy="${pose_rpy}" mesh_path="${mesh_path}" scale_xyz="${scale_xyz}">
            
            <extra_visual><xacro:insert_block name="extra_visual"/></extra_visual>
            <extra_settings>
                <collision>
                    <geometry>
                        <xacro:if value="${str(col_scale_xyz) == 'None'}">
                            <xacro:if value="${str(col_mesh_path) == 'None'}">
                                <xacro:set_mesh mesh="${mesh_path}" scale="${scale_xyz}" />
                            </xacro:if>
                            <xacro:if value="${str(col_mesh_path) != 'None'}">
                                <xacro:set_mesh mesh="${col_mesh_path}" scale="${scale_xyz}" />
                            </xacro:if>
                        </xacro:if>
                        <xacro:if value="${str(col_scale_xyz) != 'None'}">
                            <xacro:if value="${str(col_mesh_path) == 'None'}">
                                <xacro:set_mesh mesh="${mesh_path}" scale="${col_scale_xyz}" />
                            </xacro:if>
                            <xacro:if value="${str(col_mesh_path) != 'None'}">
                                <xacro:set_mesh mesh="${col_mesh_path}" scale="${col_scale_xyz}" />
                            </xacro:if>
                        </xacro:if>
                    </geometry>
                    <xacro:if value="${str(seperate_collider_xyzrpy) == 'None'}">
                        <origin xyz="${pose_xyz}" rpy="${pose_rpy}"/>
                    </xacro:if>
                    <xacro:if value="${str(seperate_collider_xyzrpy) != 'None'}">
                        <xacro:property name="seperate_collider_xyzrpy_list" value="${seperate_collider_xyzrpy.split(' ')}" />
                        <origin xyz="${seperate_collider_xyzrpy_list[0]} ${seperate_collider_xyzrpy_list[1]} ${seperate_collider_xyzrpy_list[2]}" rpy="${seperate_collider_xyzrpy_list[3]} ${seperate_collider_xyzrpy_list[4]} ${seperate_collider_xyzrpy_list[5]}"/>
                    </xacro:if>
                    <xacro:insert_block name="extra_collision"/>
                </collision>

                <xacro:if value="${str(iner) == 'None'}">
                    <xacro:property name="scale_xyz_list" value="${scale_xyz.split(' ')}" />
                    <xacro:inertial_box mass="${mass}" x="${float(scale_xyz_list[0])}" y="${float(scale_xyz_list[1])}" z="${float(scale_xyz_list[2])}" xyz="${center_mass_xyz}" rpy="0 0 0"/>
                </xacro:if>
                <xacro:if value="${str(iner) != 'None'}">
                    <xacro:property name="iner_list" value="${iner.split(' ')}" />
                    <inertial>
                        <origin xyz="${center_mass_xyz}" rpy="0 0 0"/>
                        <mass value="${mass}"/>
                        <inertia ixx="${float(iner_list[0])}" ixy="${float(iner_list[1])}" ixz="${float(iner_list[2])}" iyy="${iner_list[3]}" iyz="${float(iner_list[4])}" izz="${float(iner_list[5])}"/>
                    </inertial>
                </xacro:if>
                <xacro:insert_block name="extra_settings"/>
            </extra_settings>
        </xacro:link_creator_foundation>
    </xacro:macro>

    <xacro:macro name="link_creator_i" params="link_name pose_xyz pose_rpy mesh_path:='Box' col_mesh_path:='None' scale_xyz col_scale_xyz:='None' seperate_collider_xyzrpy:='None' center_mass_xyz:='0 0 0' mass iner:='None'">
        <xacro:link_creator_i_foundation link_name="${link_name}" pose_xyz="${pose_xyz}" pose_rpy="${pose_rpy}" mesh_path="${mesh_path}" col_mesh_path="${col_mesh_path}" scale_xyz="${scale_xyz}" col_scale_xyz="${col_scale_xyz}" seperate_collider_xyzrpy="${seperate_collider_xyzrpy}" center_mass_xyz="${center_mass_xyz}" mass="${mass}" iner="${iner}">
            <extra_collision/>
            <extra_visual/>
            <extra_settings/>
        </xacro:link_creator_i_foundation>
    </xacro:macro>



    <xacro:macro name="prop_link_creator" params="link_name pose_xyz pose_rpy mesh_path scale_xyz col_scale_xyz seperate_collider_xyzrpy:='None' center_mass_xyz:='0 0 0' mass iner">

        <xacro:link_creator_i_foundation link_name="${link_name}" pose_xyz="${pose_xyz}" pose_rpy="${pose_rpy}" mesh_path="${mesh_path}" col_mesh_path="Cylinder" scale_xyz="${scale_xyz}" col_scale_xyz="${col_scale_xyz}" seperate_collider_xyzrpy="${seperate_collider_xyzrpy}" center_mass_xyz="${center_mass_xyz}" mass="${mass}"  iner="${iner}">
            <extra_collision>
                <surface>
                    <contact>
                        <ode/>
                    </contact>
                    <friction>
                        <ode/>
                    </friction>
                </surface>
            </extra_collision>
            <extra_visual/>
            <extra_settings>
                <velocity_decay/>
            </extra_settings>
        </xacro:link_creator_i_foundation>
        <gazebo reference="${link_name}">
            <!-- <material>Gazebo/Red</material> -->
            <self_collide>0</self_collide>
        </gazebo>
    </xacro:macro>
</robot>



